name: Build Modified Magisk

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Find configuration files
      run: |
        echo "Searching for configuration files..."
        find . -name "*.hpp" -o -name "*.h" -o -name "config.sh" | grep -E "(config|stub)" | head -10
        git grep -l "STUB_APK" || echo "No STUB_APK found"
        git grep -l "stub.apk" || echo "No stub.apk found"

    - name: Modify configuration
      run: |
        # 尝试修改可能的配置文件
        # 首先检查并修改 native/src/core/config.hpp
        if [ -f "native/src/core/config.hpp" ]; then
          echo "Modifying native/src/core/config.hpp"
          sed -i 's/^#define STUB_APK_RAW .*/#define STUB_APK_RAW ""/' native/src/core/config.hpp
        fi
        
        # 检查并修改 scripts/config.sh
        if [ -f "scripts/config.sh" ]; then
          echo "Modifying scripts/config.sh"
          sed -i 's/^STUB_APK=.*/STUB_APK=""/' scripts/config.sh
        fi
        
        # 显示修改结果
        echo "Modified content:"
        git grep -n "STUB_APK" || echo "STUB_APK not found after modification"

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget zip unzip python3 python3-pip build-essential libssl-dev zlib1g-dev

    - name: Set up Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        source $HOME/.cargo/env
        rustc --version

    - name: Setup NDK using Magisk script
      run: |
        source $HOME/.cargo/env
        cd $GITHUB_WORKSPACE
        # 使用 Magisk 的 build.py 来设置 NDK
        python3 build.py -v ndk

    - name: Build Magisk native binaries
      run: |
        source $HOME/.cargo/env
        cd $GITHUB_WORKSPACE
        # 使用 Magisk 管理的 NDK 来构建原生二进制文件
        python3 build.py -v native

    - name: List output files
      run: |
        echo "Build output files:"
        find $GITHUB_WORKSPACE/out -type f -name "magisk*" | xargs ls -la
        echo ""
        echo "Directory structure:"
        find $GITHUB_WORKSPACE/out -type f | sort

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: magisk-binaries
        path: |
          out/**/magisk
          out/**/magiskinit
          out/**/magiskboot
          out/**/magiskpolicy
        if-no-files-found: error

    - name: Create compressed archive
      run: |
        cd $GITHUB_WORKSPACE/out
        # 为每个架构创建单独的压缩包
        for arch in *; do
          if [ -d "$arch" ]; then
            echo "Creating archive for $arch"
            tar -czf "../magisk-$arch-$(date +%Y%m%d).tar.gz" "$arch"/
          fi
        done
        # 创建包含所有架构的压缩包
        tar -czf "../magisk-all-arch-$(date +%Y%m%d).tar.gz" ./*/

    - name: Upload compressed archives
      uses: actions/upload-artifact@v4
      with:
        name: magisk-archives
        path: |
          ${{ github.workspace }}/magisk-*.tar.gz
        if-no-files-found: ignore
